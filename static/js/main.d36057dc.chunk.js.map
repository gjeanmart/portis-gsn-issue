{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["network","abi","App","useState","connectionStatus","setConnectionStatus","undefined","web3","setWeb3","counterInstance","setCounterInstance","account","setAccount","count","setCount","txHash","setTxHash","getCount","useCallback","a","methods","value","call","response","useEffect","onClick","portis","Portis","gasRelay","Web3","provider","instance","eth","Contract","getAccounts","error","accounts","connect","size","Fragment","increase","send","from","gasPrice","utils","toWei","on","hash","console","log","receipt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wdAKMA,EAA0B,UAA1BA,EAA8C,6CAE9CC,EAAM,CAAC,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,qBAAqB,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,WAAW,UAAY,cAAc,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,QAAQ,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,WAAW,UAAY,cAAc,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,WAAW,UAAY,cAAc,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,UAAU,KAAO,UAAU,KAAO,iBAAiB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,aAAa,KAAO,WAAW,UAAY,cAAc,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,aAAa,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,WAAW,UAAY,cAAc,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,QAAQ,KAAO,WAAW,CAAC,KAAO,OAAO,KAAO,WAAW,CAAC,KAAO,kBAAkB,KAAO,SAAS,CAAC,KAAO,iBAAiB,KAAO,WAAW,CAAC,KAAO,WAAW,KAAO,WAAW,CAAC,KAAO,WAAW,KAAO,WAAW,CAAC,KAAO,QAAQ,KAAO,WAAW,CAAC,KAAO,eAAe,KAAO,SAAS,CAAC,KAAO,oBAAoB,KAAO,YAAY,KAAO,oBAAoB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,CAAC,KAAO,GAAG,KAAO,UAAU,SAAU,EAAM,gBAAkB,OAAO,KAAO,WAAW,UAAY,cAAc,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,SAAU,EAAM,gBAAkB,OAAO,KAAO,WAAW,UAAY,cAAc,CAAC,UAAW,EAAM,OAAS,CAAC,CAAC,KAAO,UAAU,KAAO,SAAS,CAAC,KAAO,UAAU,KAAO,QAAQ,CAAC,KAAO,eAAe,KAAO,WAAW,CAAC,KAAO,YAAY,KAAO,YAAY,KAAO,kBAAkB,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,WAAW,UAAY,cAAc,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,WAAW,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,WAAW,UAAY,cAAc,CAAC,WAAY,EAAM,OAAS,CAAC,CAAC,SAAU,EAAK,KAAO,cAAc,KAAO,WAAW,CAAC,SAAU,EAAK,KAAO,cAAc,KAAO,YAAY,KAAO,kBAAkB,KAAO,QAAQ,UAAY,uEAiFltEC,MA9Ef,WAAgB,IAAD,EAEmCC,mBAAS,gBAF5C,mBAENC,EAFM,KAEYC,EAFZ,OAGWF,wBAASG,GAHpB,mBAGNC,EAHM,KAGAC,EAHA,OAIiCL,wBAASG,GAJ1C,mBAING,EAJM,KAIWC,EAJX,OAKiBP,wBAASG,GAL1B,mBAKNK,EALM,KAKGC,EALH,OAMaT,mBAAS,GANtB,mBAMNU,EANM,KAMCC,EAND,OAOeX,wBAASG,GAPxB,mBAONS,EAPM,KAOEC,EAPF,KA0BPC,EAAWC,sBAAW,sBAAC,4BAAAC,EAAA,0DACvBV,EADuB,gCAGFA,EAAgBW,QAAQC,QAAQC,OAH9B,OAGnBC,EAHmB,OAKzBT,EAASS,GALgB,2CAO1B,CAACd,IAkBJ,OAhBAe,qBAAU,WACRP,MACC,CAACR,EAAiBQ,IAenB,6BACE,yCAAeb,EAAf,KAEsB,iBAArBA,GACC,4BAAQqB,QAAS,kBA/CP,WACd,IAAIlB,EAAM,CACRF,EAAoB,cACpB,IAAMqB,EAAS,IAAIC,IAhBR,uCAgByB3B,EAAc,CAAE4B,UAAU,IACxDrB,EAAO,IAAIsB,IAAKH,EAAOI,UAC7BtB,EAAQD,GAER,IAAMwB,EAAW,IAAIxB,EAAKyB,IAAIC,SAAShC,EAAKD,GAC5CU,EAAmBqB,GAEnBxB,EAAKyB,IAAIE,aAAY,SAACC,EAAOC,GAC3BxB,EAAWwB,EAAS,IACpB/B,EAAoB,iBAmCGgC,IAAWC,KAAK,SAAvC,WAKoB,cAArBlC,GAAoCK,GACnC,kBAAC,IAAM8B,SAAP,KACE,yCAAe5B,GACf,uCAAaE,GACb,6BAAM,6BACLE,GAAU,sCAAYA,IACrBA,GACF,4BAAQU,QAAS,WA5BvBhB,EAAgBW,QAAQoB,WAAWC,KAAK,CAAEC,KAAM/B,EAASgC,SAAUpC,EAAKqC,MAAMC,MA1CjE,OA0CiF,UAC7FC,GAAG,mBAAmB,SAASC,GAC5BC,QAAQC,IAAI,QAAQF,GACpB/B,EAAU+B,MACXD,GAAG,WAAW,SAASI,GACxBF,QAAQC,IAAIC,GACZlC,OAAUV,GACVW,QAqBuCqB,KAAK,SAAxC,4BClEUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLa,QAAQb,MAAMA,EAAMiC,c","file":"static/js/main.d36057dc.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Portis from '@portis/web3';\nimport Web3 from 'web3';\n\n//const network = {id: \"1\", name: \"mainnet\", address: \"0xDdC05b7E9822b4a4AF89ca951c467022afCc0a75\"} \nconst network = {id: \"4\", name: \"rinkeby\", address: \"0xe9a09d2d71971F587BC96725f654b9Eee0552c21\"}\nconst portisId = 'f05d4e27-26b2-474d-87ed-18b648d521b7'\nconst abi = [{\"constant\":false,\"inputs\":[],\"name\":\"setDefaultRelayHub\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"signature\":\"0x1220e2ff\"},{\"constant\":true,\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\",\"signature\":\"0x3fa4f245\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHubAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\",\"signature\":\"0x74e861d6\"},{\"constant\":false,\"inputs\":[{\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"signature\":\"0x80274db7\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"signature\":\"0x8129fc1c\"},{\"constant\":true,\"inputs\":[{\"name\":\"relay\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"encodedFunction\",\"type\":\"bytes\"},{\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"approvalData\",\"type\":\"bytes\"},{\"name\":\"maxPossibleCharge\",\"type\":\"uint256\"}],\"name\":\"acceptRelayedCall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\",\"signature\":\"0x83947ea0\"},{\"constant\":true,\"inputs\":[],\"name\":\"relayHubVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\",\"signature\":\"0xad61ccd5\"},{\"constant\":false,\"inputs\":[{\"name\":\"context\",\"type\":\"bytes\"},{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"actualCharge\",\"type\":\"uint256\"},{\"name\":\"preRetVal\",\"type\":\"bytes32\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"signature\":\"0xe06e0e22\"},{\"constant\":false,\"inputs\":[],\"name\":\"increase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"signature\":\"0xe8927fbc\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRelayHub\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRelayHub\",\"type\":\"address\"}],\"name\":\"RelayHubChanged\",\"type\":\"event\",\"signature\":\"0xb9f84b8e65164b14439ae3620df0a4d8786d896996c0282b683f9d8c08f046e8\"}]\nconst gasPrice = \"1000\"\n\nfunction App() {\n\n  const [connectionStatus, setConnectionStatus] = useState('disconnected')\n  const [web3, setWeb3] = useState(undefined);\n  const [counterInstance, setCounterInstance] = useState(undefined);\n  const [account, setAccount] = useState(undefined);\n  const [count, setCount] = useState(0);\n  const [txHash, setTxHash] = useState(undefined);\n\n  const connect = () => {\n    if(!web3) {\n      setConnectionStatus(\"connecting\")\n      const portis = new Portis(portisId, network.name, { gasRelay: true });\n      const web3 = new Web3(portis.provider);\n      setWeb3(web3)\n  \n      const instance = new web3.eth.Contract(abi, network.address)\n      setCounterInstance(instance);\n  \n      web3.eth.getAccounts((error, accounts) => {\n        setAccount(accounts[0])\n        setConnectionStatus(\"connected\")\n      });\n    }\n  }\n\n  const getCount = useCallback(async () => {\n    if (counterInstance) {\n      // Get the value from the contract to prove it worked.\n      const response = await counterInstance.methods.value().call();\n      // Update state with the result.\n      setCount(response);\n    }\n  }, [counterInstance]);\n\n  useEffect(() => {\n    getCount();\n  }, [counterInstance, getCount]);\n\n  const increase = () => {\n    counterInstance.methods.increase().send({ from: account, gasPrice: web3.utils.toWei(gasPrice, \"gwei\") })\n    .on('transactionHash', function(hash){\n        console.log(\"hash=\"+hash)\n        setTxHash(hash)\n    }).on('receipt', function(receipt){\n      console.log(receipt)\n      setTxHash(undefined)\n      getCount();\n    });\n  };\n\n  return (\n    <div>\n      <h3> Counter ({connectionStatus})</h3>\n\n      {connectionStatus === 'disconnected' && (\n        <button onClick={() => connect()} size=\"small\">\n          Connect\n        </button>\n      )}\n\n      {connectionStatus === 'connected' && counterInstance && (\n        <React.Fragment>\n          <div>Account: {account}</div>\n          <div>Count: {count}</div>\n          <br /><br />\n          {txHash && <div>Hash: {txHash}</div>}\n          {!txHash && \n          <button onClick={() => increase()} size=\"small\">\n            Increase Counter by 1\n          </button>}\n            \n        </React.Fragment>\n      )}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}